package com.bettingapp.view.controls{	import com.bettingapp.controller.events.BettingAppEvent;	import com.bettingapp.model.managers.EventManager;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		public class SearchBox extends MovieClip	{		private var _inputSearch:TextField;		private var _originalValue:String;				public function SearchBox()		{			super();			mouseChildren = false;			_inputSearch = txt_searchString;		}				public override function set enabled($value:Boolean):void		{			if ($value)			{				// reset input text each time screen shows. 				_inputSearch.text = "";								addEventListener(MouseEvent.CLICK, onClicked);				EventManager.instance.addEventListener(BettingAppEvent.KEY_PRESSED, onKeyPressed);			}			else			{				removeEventListener(MouseEvent.CLICK, onClicked);				EventManager.instance.removeEventListener(BettingAppEvent.KEY_PRESSED, onKeyPressed);			}						mouseEnabled = buttonMode = $value;			super.enabled = $value;		}				private function onClicked($e:MouseEvent):void		{			// tell the underlying screen to open the keyboard (if it's not already open)			var event:BettingAppEvent = new BettingAppEvent(BettingAppEvent.KEYBOARD_OPEN);			EventManager.instance.dispatchEvent(event);						// store off with the current filter value.			_originalValue = _inputSearch.text;		}				private function onKeyPressed($e:BettingAppEvent):void		{			if ($e.parameters.DELETE)			{				if (_inputSearch.text.length > 0)				{					_inputSearch.text = _inputSearch.text.substr(0, _inputSearch.text.length - 1);				}			}			else if ($e.parameters.CLEAR)			{				_inputSearch.text = "";			}			else if ($e.parameters.CANCEL)			{				_inputSearch.text = _originalValue;			}			else			{				_inputSearch.appendText(String($e.parameters.key));			}						// tell underlying screen to refresh content			var event:BettingAppEvent = new BettingAppEvent(BettingAppEvent.REFRESH_CONTENT);			event.parameters.filter = _inputSearch.text;			EventManager.instance.dispatchEvent(event);		}	}}