package com.bettingapp.view.screens{	import com.bettingapp.controller.events.BettingAppEvent;	import com.bettingapp.model.managers.EventManager;	import com.bettingapp.model.managers.ScreenManager;	import com.bettingapp.view.controls.VirtualKeyboard;		import flash.display.MovieClip;	import flash.events.Event;
	public class BaseScreen extends MovieClip	{		//protected 	var _statusBar:StatusBar = null;		private 	var _screenId:String;		protected 	var _eventManager:EventManager;		protected 	var _initialized:Boolean = false;		static private var _virtualKeyboard:VirtualKeyboard;				public function BaseScreen()		{			super();						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						// get the event manager in the constructor as the inits will use this			_eventManager = EventManager.instance;		}				public function show():void		{			// listen for this scren being told to open the keyboard.			_eventManager.addEventListener(BettingAppEvent.KEYBOARD_OPEN, onKeyboardOpen);			showActionBar();		}				public function hide():void 		{			_eventManager.removeEventListener(BettingAppEvent.KEYBOARD_OPEN, onKeyboardOpen);						// if keyboard is open, force it closed.			if (_virtualKeyboard != null)			{				_virtualKeyboard.forceClose();			}		}				public function init():void		{			_initialized = true;		}				protected function onAddedToStage($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				final protected function changeView($view:String, $transitionType:String):void		{			var event:BettingAppEvent = new BettingAppEvent( BettingAppEvent.CHANGE_VIEW);			event.parameters.sourceScreenId = _screenId;			event.parameters.targetScreenId = $view;			event.parameters.transitionType = $transitionType;			_eventManager.dispatchEvent(event);		}				/**		 * slides the keyboard out over the current screen. 		 * 		 */				protected function showKeyboard():void		{			// only allow keyboard to be shown if we're not already showing it.			if (_virtualKeyboard == null)			{				_virtualKeyboard = new VirtualKeyboard();				_virtualKeyboard.open(this);								_eventManager.addEventListener(BettingAppEvent.KEYBOARD_CLOSE, onKeyboardClose);			}		}				/**		 * Handles key presses in case the calling screen is interested in handling individual key presses. 		 * @param $e		 * 		 */				private function onKeyboardOpen($e:BettingAppEvent):void		{			showKeyboard();		}				/**		 * Cleanup the keyboard, which has now closed. 		 * @param $e		 * 		 */				private function onKeyboardClose($e:BettingAppEvent):void		{			trace("getting keyboard close event");			_virtualKeyboard = null;			_eventManager.removeEventListener(BettingAppEvent.KEYBOARD_CLOSE, onKeyboardClose);		}				protected function showActionBar($filter:int = 0):void		{			ScreenManager.instance.actionBar.activate($filter);		}				final public function get screenId():String { return _screenId; }		final public function set screenId($id:String):void { _screenId = $id; }	}}