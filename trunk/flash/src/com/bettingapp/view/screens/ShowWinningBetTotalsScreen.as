package com.bettingapp.view.screens{	import com.bettingapp.controller.events.BettingAppEvent;	import com.bettingapp.model.managers.EventManager;	import com.bettingapp.model.managers.WebServicesManager;	import com.bettingapp.view.controls.ActionBar;	import com.bettingapp.vo.ScreenIds;	import com.bettingapp.vo.ScreenTransitionTypes;	import com.bettingapp.vo.WebServiceResults;		import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import com.bettingapp.vo.WinningBetTotal;		public class ShowWinningBetTotalsScreen extends BaseScreen	{		private const MAX_ITEMS_PER_PAGE:int = 25;		private var _pagingInfo:MovieClip;		private var _winningBetTotals:Array = new Array;		private var _totals:TextField;		private var _names:TextField;		private var _positions:TextField;		private var _currentPage:int = 1;		private var _numPages:int;						public function ShowWinningBetTotalsScreen()		{			super();					}			public override function init():void		{			_pagingInfo = mc_pagingInfo;			_names = txt_names;			_totals = txt_totals;			_positions = txt_positions;			super.init();		}				protected override function onAddedToStage($e:Event):void		{			super.onAddedToStage($e);		}				public override function show():void		{			super.show();						_eventManager.addEventListener(BettingAppEvent.ACTION, onAction);					_eventManager.addEventListener(BettingAppEvent.WEB_SERVICE_RESULT, onWebServiceResult);			WebServicesManager.instance.GetWinningBetTotals();						_pagingInfo.visible = false;			_names.text = "";			_totals.text = "";			_positions.text = "";			_winningBetTotals.length = 0;		}				protected override function showActionBar($filter:int = 0):void		{			super.showActionBar(ActionBar.BACK_BUTTON | ActionBar.PAGE_NEXT_BUTTON | ActionBar.PAGE_PREV_BUTTON);		}				public override function hide():void 		{			_eventManager.removeEventListener(BettingAppEvent.ACTION, onAction);			super.hide();		}				private function onWebServiceResult($e:BettingAppEvent):void		{			_eventManager.removeEventListener(BettingAppEvent.WEB_SERVICE_RESULT, onWebServiceResult);						_pagingInfo.visible = true;			_currentPage = _numPages = 1;						if ($e.parameters.result == WebServiceResults.RESULT_SUCCESS)			{				_winningBetTotals = $e.parameters.totals;								// calculate how many pages we have...				_numPages = (_winningBetTotals.length / MAX_ITEMS_PER_PAGE) + 1;			}			else			{				// fail			}						doLayout();		}				private function doLayout():void		{			var startIndex:int = (_currentPage - 1) * MAX_ITEMS_PER_PAGE;			var endIndex:int = startIndex + MAX_ITEMS_PER_PAGE;						// clear out old values, we're gonna refill			_positions.text = "";			_names.text = "";			_totals.text = "";					for (var i:int = startIndex; i < endIndex; i++)			{				if (i < _winningBetTotals.length)				{					var total:WinningBetTotal = _winningBetTotals[i] as WinningBetTotal;										_positions.appendText((i + 1).toString() + ".\r\n");					_names.appendText(total.attendee + "\r\n");					_totals.appendText(total.winnings.toString() + "\r\n");				}			}						// update paging info			var pagingInfo:TextField = _pagingInfo.txt_pagingInfo as TextField; 			pagingInfo.text = "Page " + _currentPage + " of " + _numPages;		}				protected function onAction($e:BettingAppEvent):void		{			switch ($e.parameters.action)			{				case ActionBar.BACK_BUTTON:					changeView(ScreenIds.SCREEN_ID_ADMIN_MENU, ScreenTransitionTypes.SCREEN_TRANSITION_TYPE_BACK);					break;				case ActionBar.PAGE_NEXT_BUTTON:					showNextPage();					break;				case ActionBar.PAGE_PREV_BUTTON:					showPrevPage();					break;			}										// straight override, no base class.		}				private function showNextPage():void		{			if (_currentPage < _numPages)			{				_currentPage++;				doLayout();			}			}				private function showPrevPage():void		{			if (_currentPage > 1)			{				_currentPage--;				doLayout();			}		}	}}