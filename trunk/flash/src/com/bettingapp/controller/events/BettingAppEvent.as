package com.bettingapp.controller.events {	import flash.events.Event;	public class BettingAppEvent extends Event	{		// navigation events.		public static const CHANGE_VIEW:String 						= "BettingAppEvent.CHANGE_VIEW";		public static const ACTION:String 							= "BettingAppEvent.ACTION";				public static const SHOW_LOADING_OVERLAY:String 			= "BettingAppEvent.SHOW_LOADING_OVERLAY";		public static const HIDE_LOADING_OVERLAY:String 			= "BettingAppEvent.HIDE_LOADING_OVERLAY";				// dialog events.		public static const DIALOG_RESULT:String					= "BettingAppEvent.DIALOG_RESULT";				// web services events.		public static const WEB_SERVICE_RESULT:String 				= "BettingAppEvent.WEB_SERVICE_RESULT";				// application events.		public static const NUMERIC_PAD_PRESSED:String 				= "BettingAppEvent.NUMERIC_PAD_PRESSED";		public static const BUTTON_PRESSED:String 					= "BettingAppEvent.BUTTON_PRESSED";		public static const REFRESH_CONTENT:String 					= "BettingAppEvent.REFRESH_CONTENT";		public static const CANDIDATE_SELECTED:String 				= "BettingAppEvent.CANDIDATE_SELECTED";		public static const UPDATE_PAGING_INFO:String 				= "BettingAppEvent.UPDATE_PAGING_INFO";				// virtual keyboard events.		public static const KEY_PRESSED:String						= "BettingAppEvent.KEY_PRESSED";			// dispatched to app to tell of exact key pressed on keyboard.		public static const KEYBOARD_STATE_CHANGE:String 			= "BettingAppEvent.KEYBOARD_STATE_CHANGE"; // internal to keyboard, allows keys to tell keyboard what happened.		public static const KEYBOARD_OPEN:String					= "BettingAppEvent.KEYBOARD_OPEN";		public static const KEYBOARD_CLOSE:String 					= "BettingAppEvent.KEYBOARD_CLOSE";						private var _parameters:Object = new Object();				public function BettingAppEvent($eventName:String):void		{			super($eventName);		}				public override function clone():Event		{			var clonedEvent:BettingAppEvent = new BettingAppEvent(type);			clonedEvent.parameters = _parameters;			return clonedEvent;		}				public function get parameters():Object { return _parameters; }		public function set parameters($val:Object):void { _parameters = $val; }	}}