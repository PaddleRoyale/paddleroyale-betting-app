package com.bettingapp.model.managers{	import com.bettingapp.controller.events.BettingAppEvent;	import com.bettingapp.model.managers.EventManager;	import com.bettingapp.view.controls.ActionBar;	import com.bettingapp.view.screens.BaseScreen;	import com.bettingapp.vo.ScreenIds;	import com.bettingapp.vo.ScreenTransitionTypes;	import com.greensock.TweenMax;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.utils.Dictionary;	import flash.geom.Point;	public class ScreenManager	{		private const TRANSITION_TIME:Number = 0.50;		private var _screens:Dictionary = new Dictionary();		private var _referenceSprite:Sprite;		private var _currentScreenId:String;		private var _transitionScreenId:String;		private var _screenContainer:Sprite;		private var _actionBar:ActionBar;				private var _appWidth:Number;		private var _appHeight:Number;				private static var _instance:ScreenManager;				public function ScreenManager($singleton:SingletonEnforcer)		{			super();		}				public static function get instance():ScreenManager		{			if (ScreenManager._instance == null)			{				ScreenManager._instance = new ScreenManager(new SingletonEnforcer);			}			return ScreenManager._instance;		}				public function init($referenceSprite:Sprite):void		{			trace("initing screen manager");			_referenceSprite = $referenceSprite;						// need to take into account scale as well.			_appWidth = (_referenceSprite.width / _referenceSprite.scaleX);			_appHeight = (_referenceSprite.height / _referenceSprite.scaleY);						EventManager.instance.addEventListener(BettingAppEvent.CHANGE_VIEW, onChangeViewEvent);						// action bar goes under screen container in display stack			_actionBar = new ActionBar();			_referenceSprite.addChild(_actionBar);						// create our container that will be used to animate the screens.			_screenContainer = new Sprite();			_screenContainer.x = _screenContainer.y = 0;			_referenceSprite.addChild(_screenContainer);		}				private function onScreenTransitionDone():void		{			trace("screen transition done...");			// remove the current screen...if any			if (_currentScreenId && _currentScreenId.length > 0)			{				trace("removing " + _currentScreenId + " from display list");								var oldScreen:BaseScreen = _screens[_currentScreenId];				oldScreen.hide();				_screenContainer.removeChild(oldScreen);			}						// update the current screen to the one we just transitioned to...			_currentScreenId = _transitionScreenId;						// send an event informing all that the screen is ready to go.		}				private function onChangeViewEvent($event:BettingAppEvent):void		{			trace("got change view event to goto screen id: " + $event.parameters.targetScreenId);			showScreen($event.parameters);		}				public function addScreen($id:String, $screen:BaseScreen):void		{			$screen.init();			$screen.screenId = $id;						_screens[$id] = $screen;		}				public function getScreen($id:String):BaseScreen		{			return _screens[$id];		}				private function showScreen($params:Object):void		{			// store off screen that we want to show...we'll set it as the current screen once the transition is complete.			_transitionScreenId = $params.targetScreenId;						var newScreen:BaseScreen = _screens[_transitionScreenId];						if (newScreen)			{				// show the new screen				trace("adding " + _transitionScreenId + " to display list " + newScreen);								switch (String($params.transitionType))				{ 					case ScreenTransitionTypes.SCREEN_TRANSITION_TYPE_FORWARD:					case ScreenTransitionTypes.SCREEN_TRANSITION_TYPE_BACK:						var screenForward:Boolean = (String($params.transitionType) == ScreenTransitionTypes.SCREEN_TRANSITION_TYPE_FORWARD);												// see if we need to do a screen transition.						if (_currentScreenId && _currentScreenId.length > 0)						{							var currentScreen:BaseScreen = _screens[_currentScreenId];														_screenContainer.x 			= 0;							currentScreen.x 			= 0;														if (screenForward)							{								newScreen.x 				= currentScreen.width;								TweenMax.to(_screenContainer, TRANSITION_TIME, { x:(_screenContainer.x - _screenContainer.width), repeat:0, onComplete:onScreenTransitionDone });							}							else							{								newScreen.x 				= -currentScreen.width;								TweenMax.to(_screenContainer, TRANSITION_TIME, { x:(_screenContainer.x + _screenContainer.width), repeat:0, onComplete:onScreenTransitionDone });							}														trace("starting screen transition...");						}						else						{							//nothing to transition to, just snap on.							newScreen.x = newScreen.y = 0;							onScreenTransitionDone();						}						break;										case ScreenTransitionTypes.SCREEN_TRANSITION_TYPE_NONE:					default:						// no transition, snap on.						newScreen.x = newScreen.y = 0;						onScreenTransitionDone();						break;				}								// show it add it to the screen container.				_screenContainer.addChild(newScreen);				newScreen.show();			}		}				public function get actionBar():ActionBar		{			return _actionBar;		}		public function get referenceSprite():Sprite		{			return _referenceSprite;		}				public function get appWidth():Number		{			return _appWidth;		}				public function get appHeight():Number		{			return _appHeight;		}	}}internal class SingletonEnforcer {}