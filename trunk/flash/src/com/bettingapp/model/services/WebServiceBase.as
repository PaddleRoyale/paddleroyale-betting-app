package com.bettingapp.model.services{	import com.bettingapp.controller.events.BettingAppEvent;	import com.bettingapp.model.managers.EventManager;	import com.bettingapp.vo.WebServiceResults;		import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestHeader;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	public class WebServiceBase	{		protected static const BASE_URL:String = "http://www.paddle-royale.com/";		protected var _urlRequest:URLRequest;		protected var _urlLoader:URLLoader;		protected var _urlVariables:URLVariables;		private var _contentTypeHeader:URLRequestHeader;		private var _acceptHeader:URLRequestHeader;		protected var _eventManager:EventManager;				public function WebServiceBase()		{			_eventManager = EventManager.instance;			_urlRequest = new URLRequest();			_urlLoader = new URLLoader();			_urlVariables = new URLVariables();						// all our services deal in JSON			_contentTypeHeader					= new URLRequestHeader("Content-Type", "application/json");			_acceptHeader						= new URLRequestHeader("Accept", "application/json");						_urlRequest.method 				= URLRequestMethod.POST;			_urlRequest.requestHeaders.push(_contentTypeHeader);			_urlRequest.requestHeaders.push(_acceptHeader);		}				protected function removeListeners():void		{			// every finished web service call pipes through here, so this as good a place as any to turn off the loading anim.			_eventManager.dispatchEvent(new BettingAppEvent(BettingAppEvent.HIDE_LOADING_OVERLAY));						_urlLoader.removeEventListener(Event.COMPLETE, 						onResult);			_urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,	onSecurityError);			_urlLoader.removeEventListener(IOErrorEvent.IO_ERROR,				onIoError);			_urlLoader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, 		onHTTPStatus);		}				public function execute():void		{			_eventManager.dispatchEvent(new BettingAppEvent(BettingAppEvent.SHOW_LOADING_OVERLAY));						trace("base execute");			_urlLoader.addEventListener(Event.COMPLETE, 					onResult);			_urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,	onSecurityError);			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR,				onIoError);			_urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, 		onHTTPStatus);							// Add on a cache value to the variable to force it to not treat this as the same service call.			_urlVariables.cacheBuster = uint(Math.random() * uint.MAX_VALUE);						//trace("cacheBuster=" + _urlVariables.cacheBuster);							_urlRequest.data = _urlVariables;			_urlLoader.load(_urlRequest);		}				protected function onResult($e:Event):void		{			trace("onResult");						var event:BettingAppEvent = new BettingAppEvent(BettingAppEvent.WEB_SERVICE_RESULT);			event.parameters.result = WebServiceResults.RESULT_SUCCESS;			_eventManager.dispatchEvent(event);						removeListeners();		}				protected function onSecurityError($e:SecurityErrorEvent):void		{			trace("onSecurityError");						var event:BettingAppEvent = new BettingAppEvent(BettingAppEvent.WEB_SERVICE_RESULT);			event.parameters.result = WebServiceResults.RESULT_ERROR;			_eventManager.dispatchEvent(event);						removeListeners();		}				protected function onIoError($e:IOErrorEvent):void		{			trace("onIoError");						var event:BettingAppEvent = new BettingAppEvent(BettingAppEvent.WEB_SERVICE_RESULT);			event.parameters.result = WebServiceResults.RESULT_ERROR;			_eventManager.dispatchEvent(event);						removeListeners();		}				protected function onHTTPStatus($e:HTTPStatusEvent):void		{			trace("onHTTPStatus");		}		public function get urlVariables():URLVariables		{			return _urlVariables;		}	}}